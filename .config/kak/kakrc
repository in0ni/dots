source "%val{config}/colorscheme.kak"

# plug.kak
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

plug "andreyorst/smarttab.kak" %{
  hook global WinSetOption filetype=.* %{ expandtab }
} defer smarttab %{
  set-option global softtabstop 2
}

plug "alexherbo2/auto-pairs.kak" %{
  enable-auto-pairs
}

plug "kak-lsp/kak-lsp" do %{
  cargo install --locked --force --path .
} config %{
  map -docstring "lsp mode" global user l ': enter-user-mode lsp<ret>'
  map global normal <tab> ': try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
  map global insert <tab> '<a-;>: try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'

  set-option global lsp_config %{
    [language.python.settings._]
    "pyls.configurationSources" = ["flake8"]
  }
}

plug "in0ni/kak-dap" do %{
  cargo install --locked --force --path .
} config %{
  map global user x -docstring 'dap mode' ': enter-user-mode dap<ret>'
}

# plug "lePerdu/kakboard" %{
#   hook global WinCreate .* %{ kakboard-enable }
# }

plug "andreyorst/fzf.kak" %{
  map -docstring 'fzf mode' global user f ': fzf-mode<ret>'
} demand fzf %{
  set-option global fzf_terminal_command 'kitty-terminal-overlay kak -c %val{session} -e "%arg{@}"'
  set-option global fzf_highlight_command 'bat'
} demand fzf-file %{
  set-option global fzf_file_command 'rg --files --hidden'
}

plug "andreyorst/tagbar.kak" %{
  # if you have wrap highlighter enamled in you configuration
  # files it's better to turn it off for tagbar, using this hook:
  hook global WinSetOption filetype=tagbar %{
    remove-highlighter window/wrap
    # you can also disable rendering whitespaces here, line numbers, and
    # matching characters
  }
  declare-user-mode tagbar
  map global tagbar e ':tagbar-enable<ret>' -docstring 'enable'
  map global tagbar d ':tagbar-disable<ret>' -docstring 'disable'
  map global tagbar t ':tagbar-toggle<ret>' -docstring 'toggle'
  map global user t ': enter-user-mode tagbar<ret>' -docstring 'tagbar mode'
} defer "tagbar" %{
  set-option global tagbar_sort false
  set-option global tagbar_size 40
  set-option global tagbar_display_anon false
}

plug "h-youhei/kakoune-surround" %{
  declare-user-mode surround
  declare-user-mode surroundtag
  map global surround s ':surround<ret>' -docstring 'surround'
  map global surround c ':change-surround<ret>' -docstring 'change'
  map global surround d ':delete-surround<ret>' -docstring 'delete'
  map global surround e ':select-surround<ret>' -docstring 'select'
  map global surround t ':enter-user-mode surroundtag<ret>' -docstring 'tag'
  map global surroundtag s ':surround-with-tag<ret>' -docstring 'surround tag'
  map global surroundtag d ':delete-surrounding-tag<ret>' -docstring 'delete tag'
  map global surroundtag c ':change-surrounding-tag<ret>' -docstring 'change tag'
  map global surroundtag e ':select-surrounding-tag<ret>' -docstring 'select tag'
  map global user s ':enter-user-mode surround<ret>' -docstring 'surround mode '
}

plug "occivink/kakoune-vertical-selection" %{
  map global user v ': vertical-selection-down<ret>' -docstring 'vertsel down'
  map global user <a-v> ': vertical-selection-up<ret>' -docstring 'vertsel up'
  map global user V ': vertical-selection-up-and-down<ret>' -docstring 'vertsel up/down'
}

plug "occivink/kakoune-find"
plug "occivink/kakoune-sudo-write"
plug "occivink/kakoune-snippets" %{
  # def -hidden insert-c-n %{
  #   try %{
  #     snippets-select-next-placeholders
  #     exec '<a-;>d'
  #   } catch %{
  #     exec -with-hooks '<c-n>'
  #   }
  # }
  # map global insert <a-n> "<a-;>: insert-c-n<ret>"
  # map global insert <a-s> '<a-;>: snippets '
}
plug "JJK96/kakoune-emmet"
 
source "%val{config}/ui.kak"
source "%val{config}/files.kak"
source "%val{config}/mappings.kak"
source "%val{config}/code.kak"
source "%val{config}/kitty-ide.kak"
source "%val{config}/asterisk.kak"
source "%val{config}/toggle-highlighter.kak"

# support kcr
evaluate-commands %sh{
  kcr init kakoune
}

# local overrides (testing, mainly filetypes)
evaluate-commands %sh{
  load_local_rc() {
    find -L "$1" -type f -name '*\.kak' \
    | sed 's/.*/try %{ source "&" } catch %{ echo -debug Autoload: could not load "&" }/'
  }

  if [ -d "${kak_config}/rc" ]; then
    load_local_rc ${kak_config}/rc
  fi
}
