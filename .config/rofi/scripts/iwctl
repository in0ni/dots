#!/usr/bin/env bash

# TODO: auto-detect device (wlan0), multiple devices
# TODO: better messaging (on fail/success)
# TODO: final round of testing (auto-connect not working?)

icon=
title=Wireless
icon_notify=network-wireless-connected

# fontawesome-based
declare -A icons_rofi
icons_rofi[active]=
icons_rofi[auto]=
icons_rofi[back]=
icons_rofi[delete]=
icons_rofi[insecure]=
icons_rofi[not_found]=
icons_rofi[password]=
icons_rofi[radio_off]=
icons_rofi[radio_on]=
icons_rofi[refresh]=
icons_rofi[saved]=
icons_rofi[scan]=
icons_rofi[secure]=
icons_rofi[show]=
icons_rofi[warn]=
source "$(dirname "$0")/common/utils" "$icon" "$title" "${icons_rofi[@]}"

# XXX: remove this hardcoded reference
iwctl_station=wlan0

# look into ' +' regex for field separator, like rofi-systemctl
# awk field widths
fields_station_show="2 10 20 21"
fields_get_networks="6 34 20 4"
fields_known_networks="2 32 13 13 20"
fields_known_network_show="2 10 18 50"

# parses the signal columng, only leaving those that are white (value)
ansi_clean_signal='s/\x1b\[1;90m\*{1,3}//g'
# cleans all remaining ansi codes
ansi_clean_all='s/\x1b\[[0-9;]*m//g'

declare -A cmd
cmd[auto_connect]=auto-connect
cmd[connect]=connect
cmd[disconnect]=disconnect
cmd[forget_network]=forget-network
cmd[known_network]=known-network
cmd[list_avail]=list-available
cmd[list_known]=list-known
cmd[scan]=scan

declare -A opt
opt[refresh_network]="${icons_rofi[refresh]}  Refresh networks list...\0info\x1f${cmd[list_avail]}\n"
opt[scan_networks]="${icons_rofi[scan]}  Scan for networks...\0info\x1f${cmd[scan]}\n"
opt[known_networks]="${icons_rofi[saved]}  Known networks...\0info\x1f${cmd[list_known]}\n"
opt[back_available_networks]="${icons_rofi[back]}  Back to networks list...\0info\x1f${cmd[list_avail]}\n"
opt[back_known_networks]="${icons_rofi[back]}  Back to known networks list...\0info\x1f${cmd[list_known]}\n"

is_scanning() {
  output=$(iwctl station $iwctl_station show |
    sed -E "$ansi_clean_all" |
    awk -v FIELDWIDTHS="$fields_station_show" '$3~/Scanning/ { print $4 }')

  if [[ $output == "yes" ]]; then
    return 0
  else
    return 1
  fi
}

is_known_network() {
  iwctl known-networks "$1" show &>/dev/null
  return $?
}

station_scan() {
  iwctl station $iwctl_station scan
  set_message "Scanning for networks, should refresh..."
  notify "Scanning for networks..." $?
}

# LISTS
# TODO: remove empty line at end of output
list_available_networks() {
  output=$(
    iwctl station $iwctl_station get-networks |
      sed -E "$ansi_clean_signal" |
      sed "$ansi_clean_all" |
      # get all, but last lines
      head -n -1 |
      awk -v FIELDWIDTHS="$fields_get_networks" \
        -v cmd_disconnect="${cmd[disconnect]}" -v cmd_connect="${cmd[connect]}" \
        $(set_icon_vars "active" "insecure" "secure" "radio_on" "radio_off" "not_found") \
        '
      # from 5th record (Number Record)
      NR > 4 {
        # no networks found
        if ($1 == "No n") {
          printf "%s  No networks found...", icon_not_found
          exit
        }

        active=gensub(/ +/, "", "g", $1)
        ssid=gensub(/ +$/,"", "g", $2)
        security=gensub(/ +/,"", "g", $3)
        signal=length(gensub(/ /, "", "g", $4))

        # active
        if (length(active))
          printf "%s  ", icon_active
        else
          printf "      "

        # security
        if (security == "open")
          printf "%s  ", icon_insecure
        else
          printf "%s  ", icon_secure

        # signal
        for (i = 0; i < signal; ++i)
          printf "%s", icon_radio_on
        for (i = 0; i < 4-signal; ++i)
          printf "%s", icon_radio_off

        printf "  %s", ssid

        if (length(active))
          printf "\\0info\x1f%s\n", cmd_disconnect
        else
          printf "\\0info\x1f%s:%s:%s\n", cmd_connect, ssid, security
      }'
  )
  echo -en "$output"
}

list_known_networks() {
  output=$(
    iwctl known-networks list |
      sed -E "$ansi_clean_signal" |
      sed "$ansi_clean_all" |
      head -n -1 |
      awk -v FIELDWIDTHS="$fields_known_networks" \
        -v cmd_known="${cmd[known_network]}" \
        $(set_icon_vars "insecure" "secure") \
        'NR > 4 {
          ssid=gensub(/ +$/,"", "g", $2)
          security=gensub(/ +/,"", "g", $3)
          hidden=gensub(/ +/, "", "g", $4)
          last=gensub(/ +$/, "", "g", $5)

          printf "      "

          # security
          if (security == "open")
            printf "%s  ", icon_insecure
          else
            printf "%s  ", icon_secure

          printf " %s (%s)", ssid, last
          printf "\\0info\x1f%s:%s\n", cmd_known, ssid
    }'
  )
  echo -en "$output"
}

# OPTIONS
networks_menu() {
  echo -en "${opt[refresh_network]}"
  echo -en "${opt[scan_networks]}"
  echo -en "${opt[known_networks]}"
  print_divider
}

known_networks_menu() {
  echo -en "${opt[back_available_networks]}"
  print_divider
}

known_network_menu() {
  ssid=$1
  echo -en "${opt[back_known_networks]}"
  print_divider
  output=$(iwctl known-networks "$1" show |
    sed "$ansi_clean_all" |
    awk -v FIELDWIDTHS="$fields_known_network_show" '$3~/AutoConnect/ { print $4 }')

  [[ $output == "yes" ]] && toggle=no || toggle=yes
  echo -en "${icons_rofi[auto]}  Auto Connect: $output\0info\x1f${cmd[auto_connect]}:$1:$toggle\n"
  # echo -en "${icons_rofi[show]}  Show Password\0info\x1fget-password:$ssid\n"
  echo -en "${icons_rofi[delete]} Forget\0info\x1f${cmd[forget_network]}:$ssid\n"
}

rofi_list_networks() {
  networks_menu
  list_available_networks
}

rofi_list_known_networks() {
  known_networks_menu
  list_known_networks
}

# DEFAULT TITLE
set_title $title
set_message ""

# FIRST RUN
if [[ $ROFI_RETV == 0 ]]; then
  # if ! is_scanning; then
  #   station_scan
  # fi

  rofi_list_networks
fi

# ENTRY MADE
if [[ $ROFI_RETV == 1 ]]; then

  case $ROFI_INFO in
  "${cmd[list_avail]}")
    rofi_list_networks
    ;;
  "${cmd[scan]}")
    station_scan
    rofi_list_networks
    ;;
  "${cmd[list_known]}")
    set_subtitle "Known Networks" "${icons_rofi[saved]}"
    known_networks_menu
    list_known_networks
    ;;
  "${cmd[known_network]}":*)
    ssid=${ROFI_INFO#*"${cmd[known_network]}":}
    set_subtitle "$ssid" "${icons_rofi[saved]}"
    known_network_menu "$ssid"
    ;;
  "${cmd[forget_network]}":*)
    ssid=${ROFI_INFO#*"${cmd[forget_network]}":}
    iwctl known-networks "$ssid" forget
    notify "Forgot network" $?
    ;;
  "${cmd[auto_connect]}":*)
    IFS=":" read -r -a data <<<"$ROFI_INFO"
    iwctl known-networks "${data[1]}" set-property AutoConnect "${data[2]}"
    notify "Toggle ${cmd[auto_connect]}" $?
    known_network_menu "${data[1]}"
    ;;
  "${cmd[disconnect]}")
    iwctl station $iwctl_station disconnect
    notify "Disconnected" $?
    ;;
  # get-password:*)
  #   ssid=${ROFI_INFO#*get-password:}
  #   # pkexec cat "/var/lib/iwd/$ssid.psk"
  #   ;;
  "${cmd[connect]}":*)
    IFS=":" read -r -a data <<<"$ROFI_INFO"
    ssid="${data[1]}"
    security="${data[2]}"

    # if network is known, and open no need for password
    if is_known_network "$ssid" || [ "$security" = "open" ]; then
      set_message "Unable to connect to $ssid..."
      exec=$(iwctl station $iwctl_station connect "$ssid")
      ret=$?
      if [ $ret -eq 0 ]; then
        notify "Connected to $ssid" $ret
      fi

    # write ssid to cache file, and get custom input
    else
      echo "$ssid" >"$HOME"/.cache/rofi-iwctl.connect
      set_subtitle "$ssid" "${icons_rofi[password]}"
      echo -en "\0message\x1fEnter password for $ssid...\n"
      print_divider
    fi
    ;;
  esac

fi

# CUSTOM ENTRY MADE (password)
if [[ $ROFI_RETV == 2 ]]; then
  ssid="$(cat "$HOME"/.cache/rofi-iwctl.connect)"
  set_subtitle "$ssid" "${icons_rofi[password]}"
  # ensure to tripple quote as need quotes in command
  exec=$(iwctl -P """$@""" station $iwctl_station connect """$ssid""")
  ret=$?

  if [[ $ret -eq 0 ]]; then
    notify "Connected to $ssid" $ret
  else
    error=$(echo "$exec" | sed "$ansi_clean_all")
    set_message "${icons_rofi[warn]}  $error."
    notify "Incorrect Password" $ret
    echo -en "${opt[back_available_networks]}"
    echo -en "${icons_rofi[refresh]}  Try Again...\0info\x1f${cmd[connect]}:$ssid\n"
  fi
fi
