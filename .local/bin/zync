#!/bin/bash

declare -A CFG=(
  [settings]="$XDG_CONFIG_HOME/zync/settings.json"
  [home_include]="$XDG_CONFIG_HOME/zync/home.include"
  [home_exclude]="$XDG_CONFIG_HOME/zync/home.exclude"
)

get_json_setting() {
  local name=$1
  echo "$name"
  # Set local working directory from local config file
  CFG["$name"]=$(jq -e -r ".$name" "${CFG[settings]}" || {
    echo -e "\e[31mMissing '$name' in config\e[0m" >&2
    exit 1
  })
  CFG["$name"]=$(eval echo "${CFG["$name"]}")
}

# INIT
get_json_setting home_external

handle_backup() {
  local src="$HOME/"
  local target="${CFG[home_external]}"
  local exclude="${CFG[home_exclude]}"

  # gpg
  gpg --export-secret-keys --export-options backup --output "$target/priv.gpg"
  gpg --export --export-options backup --output "$target/pub.gpg"
  gpg --export-ownertrust >"$target/trust.gpg"

  # ssh
  cd "$src" || exit
  tar czf - .ssh | gpg --encrypt -r 5FF8F1ABEC0DE51A --output "$target/ssh.tgz.gpg"

  # files
  rsync -ahv --progress --exclude-from="$exclude" "$src" "$target"
}

handle_restore() {
  local src="${CFG[home_external]}"
  local target="$HOME/"
  local include="${CFG[home_include]}"

  # ssh
  gpg -d "$src/ssh.tgz.gpg" | tar xzf - -C "$target"

  rsync -ahv --progress --include-from="$include" "$src" "$target"
}

usage() {
  printf "\nUsage:\t%s [backup|restore]" "$(basename "$0")"
  printf "\n"
}

main() {
  case "${1:-}" in
  backup) handle_backup "${@:2}" ;;
  restore) handle_restore "${@:2}" ;;
  *)
    usage
    exit 1
    ;;
  esac
}

main "$@"
