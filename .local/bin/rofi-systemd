#!/usr/bin/env bash
#
# TODO: support 0 units being returned

NAME="$(basename "$0")"
# VERSION="0.2"
icon=
title=systemd
UNIT_OWNER=system
UNIT_NAME=

source "${XDG_CONFIG_HOME:-$HOME/.config}/dotvars.sh"

# fontawesome
declare -A ico
ico[back]=
ico[warn]=
ico[check]=
ico[ok]=
ico[not_found]=
ico[bad_setting]=
ico[error]= #also failed
ico[masked]=
ico[reloading]=
ico[inactive]=
ico[activating]=
ico[deactivating]=
ico[unconfigured]=
ico[toggle_on]=
ico[toggle_off]=
ico[units]=
ico[unit]=
ico[memory]=
ico[user]=
ico[sys]=

declare -A ctrl
ctrl[enabled]=Enabled
ctrl[active]=Active

declare -A args
args[failed]=--failed
args[user]=--user
args[user]=--user

# UTILS
import_icons() {
  vars=()
  for key in "${!ico[@]}"; do
    vars+=(-v "icon_${key}=${ico[$key]}")
  done
  echo "${vars[@]}"
}

import_vars() {
  vars=()
  # user or sys unit
  # $@ = "one" "two" "three" vs $* = "one two three"
  if [[ "$*" =~ ${args[user]} ]]; then
    vars+=(-v owner=user -v "icon_owner=${ico[user]}")
  else
    vars+=(-v owner=system -v "icon_owner=${ico[sys]}")
  fi

  # colors
  vars+=(-v green=#"${b16_02_green}"
    -v red=#"${b16_01_red}"
    -v yellow=#"${b16_03_yellow}"
    -v gray=#"${theme_dark_4}"
  )

  echo "${vars[@]}"
}

sys_ctl() {
  cmd=(systemctl)
  [[ $UNIT_OWNER == "user" ]] && cmd+=(--user)
  echo "${cmd[@]}"
}

set_owner() {
  params=(${1//:/ })
  UNIT_OWNER="${params[1]}"
  UNIT_NAME="${params[2]}"
}

is_service() {
  $(sys_ctl) is-"$1" "$UNIT_NAME" -q
  return $?
}

handoff() {
  env CMD="$1" RSN="$NAME" INF="$2" rofi-handoff &> /dev/null &
  exit
}

toggle_enabled() {
  if is_service enabled; then
    handoff "$(sys_ctl) disable $UNIT_NAME" "unit:${UNIT_OWNER}:${UNIT_NAME}"
  else
    handoff "$(sys_ctl) enable $UNIT_NAME" "unit:${UNIT_OWNER}:${UNIT_NAME}"
  fi
}

toggle_active() {
  if is_service active; then
    handoff "$(sys_ctl) stop $UNIT_NAME" "unit:${UNIT_OWNER}:${UNIT_NAME}"
  else
    handoff "$(sys_ctl) start $UNIT_NAME" "unit:${UNIT_OWNER}:${UNIT_NAME}"
  fi
}

toggle() {
  [[ $2 == 0 ]] && icon=${ico[toggle_on]} || icon=${ico[toggle_off]}
  echo -en "$icon  $1\0info\x1f$1:$UNIT_OWNER:$UNIT_NAME\n"
}

notify() {
  desc=$(echo "$1" | sed 's/\x1b\[[0-9;]*m//g' | sed 's/[\x01\x02]//g')
  status=$2

  [[ $status == 0 ]] && urgency=normal || urgency=critical
  notify-send "$title" "$desc" -i blueman -u $urgency
}

list_unit_files() {
  output=$(
    systemctl --no-pager --no-legend -l "$@" list-unit-files \
      | awk -F' +' $(import_vars "$@") $(import_icons) \
        '{
      name=$1
      state=$2
      preset=$3

      cols[0]=state
      cols[1]=preset

      for (i in cols) {
        switch (cols[i]) {
          case /^(enabled(\-runtime)?|alias)$/:
            printf "<span color=\"%s\">%s</span> ", green, icon_ok
            break
          case /^(disabled|bad)$/:
            printf "<span color=\"%s\">%s</span>  ", red, icon_not_found
            break
          default:
            printf "<span color=\"%s\">%s</span> ", gray, icon_ok
            break
        }
      }

      if (owner == "user")
        printf "\t "
      else
        printf "\t"
      printf "%s  ", icon_owner

      printf "<b>%s</b> — <small>%s  %s</small>", $1, $2, $3
      printf "\\0info\x1funit:%s:%s\x1fmeta\x1f.%s\n", owner, $1, owner
     }'
  )
  echo -e "$output"
}

list_units() {
  output=$(systemctl --no-legend --no-pager -l "$@" \
    | awk -F' +' $(import_vars "$@") $(import_icons) \
      '{
      name=$2
      load=$3
      active=$4
      substate=$5

      # status warn
      if ($1 == "")
        printf "   "
      else
        printf "<span color=\"%s\">%s</span>  ", yellow, icon_warn

      # LOAD
      switch (load) {
        case "loaded":
          printf "<span color=\"%s\">%s</span>", green, icon_ok
          break
        case "not-found":
          printf "<span color=\"%s\">%s</span>", red, icon_not_found
          break
        case "bad-setting":
          printf "<span color=\"%s\">%s</span>", red, icon_bad_setting
          break
        case "error":
          printf "<span color=\"%s\">%s</span>", red, icon_error
          break
        case "masked":
          printf "<span color=\"%s\">%s</span>", gray, icon_masked
          break
        default:
          printf "<span color=\"%s\">%s</span>", gray, icon_unconfigured
          break
      }

      printf " "

      # ACTIVE
      switch (active) {
        case "active":
          printf "<span color=\"%s\">%s</span>", green, icon_ok
          break
        case "reloading":
          printf "<span color=\"%s\">%s</span>", gray, icon_reloading
          break
        case "inactive":
          printf "<span color=\"%s\">%s</span>", gray, icon_inactive
          break
        case "failed":
          printf "<span color=\"%s\">%s</span>", red, icon_error
          break
        case "activating":
          printf "<span color=\"%s\">%s</span>", gray, icon_activating
          break
        case "deactivating":
          printf "<span color=\"%s\">%s</span>", gray, icon_deactivating
          break
        default:
          printf "<span color=\"%s\">%s</span>", gray, icon_unconfigured
          break
    }

      if (owner == "user")
        printf "\t "
      else
        printf "\t"
      printf "%s  ", icon_owner

      printf "<b>%s</b> [%s] — <small>", name, substate

      # DESCRIPTION
      for (i=6; i<=NF; i++) {
       printf "%s", $i
       if (i < NF) printf " "
      }

      printf "</small>\\0info\x1funit:%s:%s\x1fmeta\x1f.%s\n", owner, name, owner
    }')
  echo -e "$output"
}

rofi_default() {
  echo -e "${ico[units]}\tInstalled Units\0info\x1flist-unit-files"
  echo -e " ${ico[memory]}\tRunning Units\0info\x1flist-units"
  echo -e " ${ico[error]}\tFailed\0info\x1flist-failed"
  # print_divider
  # echo -e "       Services\0info\x1flist-services"
  # echo -e "       Devices\0info\x1flist-devices"
  # echo -e "       Paths\0info\x1flist-paths"
  # echo -e "       Scopes\0info\x1flist-scopes"
  # echo -e "       Slices\0info\x1flist-slices"
  # echo -e "       Mounts\0info\x1flist-mounts"
  # echo -e "       Sockets\0info\x1flist-sockets"
  # echo -e "       Timers\0info\x1flist-timers"
  # echo -e "       Targets\0info\x1flist-targets"
}

rofi_list_all_units() {
  list_unit_files "${args[user]}"
  list_unit_files
}

rofi_list_units() {
  list_units "${args[user]}"
  list_units
}

rofi_list_failed() {
  list_units "${args[failed]}" "${args[user]}"
  list_units "${args[failed]}"
}

rofi_service() {
  set_subtitle "$UNIT_NAME"

  is_service active
  toggle ${ctrl[active]} $?

  is_service enabled
  toggle ${ctrl[enabled]} $?

  echo -en "${ico[back]}\tBack\0info\x1f\n"
  print_divider

  output=$($(sys_ctl) show "$UNIT_NAME" | awk -F '=' \
    '{ printf "<b>%s</b> — %s\\0nonselectable\x1ftrue\n", $1, $2 }')
  echo -en "$output"
}

set_message() {
  echo -en "\0message\x1f$1\n"
}

set_title() {
  echo -en "\0prompt\x1f$icon  $1\n"
}

set_subtitle() {
  set_title "→  $1  $2"
}

print_divider() {
  echo -en " \0nonselectable\x1ftrue\n"
}

# DEFAULT TITLE
set_title $title
echo -en "\0markup-rows\x1ftrue\n"

# FIRST RUN
if [[ $ROFI_RETV == 0 ]]; then
  if [[ ! -f ~/.cache/rofi-handoff ]]; then
    rofi_default
  else
    ROFI_RETV=1
    # XXX: this is problematic as hitting "back" allows will return
    # to same area and try to say, enable/disable a unit
    ROFI_INFO=$(awk 'NR==1' ~/.cache/rofi-handoff)
    ret=$(awk 'NR==2' ~/.cache/rofi-handoff)
    msg=$(awk 'NR>2' ~/.cache/rofi-handoff)

    rm ~/.cache/rofi-handoff
    notify "$msg" "$ret"
  fi
fi

# ENTRY MADE
if [[ $ROFI_RETV == 1 ]]; then
  case $ROFI_INFO in
    "list-unit-files")
      set_subtitle "Installed Units"
      echo -e "${ico[back]}\tBack"
      print_divider
      rofi_list_all_units
      ;;
    "list-units")
      set_subtitle "Running Units"
      set_message "Try '<b>.user .service</b>' or '<b>.system .timer</b>'. Supports all service types: <i>service</i>, <i>device</i>, <i>path</i>, <i>scope</i>, <i>slice</i>, <i>mount</i>, <i>socket</i>, <i>timer</i>, <i>target</i>"
      echo -e "${ico[back]}\tBack"
      print_divider
      rofi_list_units
      ;;
    "list-failed")
      set_subtitle "Failed"
      echo -e "${ico[back]}\tBack"
      print_divider
      rofi_list_failed
      ;;
      # "list-services")
      #   set_subtitle "Installed Services"
      #   echo -en "${ico[back]}  Back\n"
      #   print_divider
      #   list_unit_files "-t service"
      #   ;;
    ${ctrl[enabled]}:*)
      set_owner "$ROFI_INFO"
      toggle_enabled
      ;;
    ${ctrl[active]}:*)
      set_owner "$ROFI_INFO"
      toggle_active
      ;;
    unit:*)
      set_owner "$ROFI_INFO"
      rofi_service
      ;;
    *)
      rofi_default
      ;;
  esac

fi
