#!/usr/bin/env bash
#
# TODO: support 0 units being returned

# NAME="$(basename "$0")"
# VERSION="0.2"
icon=
title=systemd

source ~/.config/dotvars.sh

# fontawesome
declare -A ico
ico[back]=
ico[warn]=
ico[check]=
ico[ok]=
ico[not_found]=
ico[bad_setting]=
ico[error]=  #also failed
ico[masked]=
ico[reloading]=
ico[inactive]=
ico[activating]=
ico[deactivating]=
ico[unconfigured]=
ico[toggle_on]=
ico[toggle_off]=
ico[units]=
ico[unit]=
ico[memory]=
ico[user]=
ico[sys]=

declare -A ctrl
ctrl[enabled]=Enabled
ctrl[active]=Active

ARGS_FAILED=(--failed)
ARGS_USER=(--user)

# UTILS
import_icons() {
  for key in "${!ico[@]}"; do
    echo "-v icon_$key=${ico[$key]} "
  done
}

import_colors() {
  echo "-v green=#${b16_02_green} "
  echo "-v red=#${b16_01_red} "
  echo "-v yellow=#${b16_03_yellow} "
  echo "-v gray=#${theme_dark_4} "
}

is_service() {
  systemctl is-$1 $2 -q
  return $?
}

handoff() {
  env CMD="$1" RSN=$(basename $0) INF="$2" rofi-handoff &> /dev/null &
  exit
}

toggle_enabled() {
  unit=${1#*${ctrl[enabled]}:}
  if is_service enabled $unit; then
    handoff "systemctl disable $unit" "unit:$unit"
  else
    handoff "systemctl enable $unit" "unit:$unit"
  fi
}

toggle_active() {
  unit=${1#*${ctrl[active]}:}
  if is_service active $unit; then
    handoff "systemctl stop $unit" "unit:$unit"
  else
    handoff "systemctl start $unit" "unit:$unit"
  fi
}

toggle() {
  [[ $3 == 0 ]] && icon=${ico[toggle_on]} || icon=${ico[toggle_off]}
  echo -en "$icon  $2\0info\x1f$2:$1\n"
}

notify() {
  desc=$(echo $1 | sed 's/\x1b\[[0-9;]*m//g' | sed 's/[\x01\x02]//g')
  status=$2

  [[ $status == 0 ]] && urgency=normal || urgency=critical
  notify-send "$title" "$desc" -i blueman -u $urgency
}

list_unit_files() {
  # $@ = "one" "two", $* = "one two"
  [[ "$*" =~ $ARGS_USER ]] && icon_owner="${ico[user]}" || icon_owner="${ico[sys]}"

  output=$(systemctl --no-pager --no-legend -l "$@" list-unit-files | \
    awk -F' +' -v icon_owner=$icon_owner $(import_icons) $(import_colors) \
    '{
      name=$1
      state=$2
      preset=$3

      cols[0]=state
      cols[1]=preset

      for (i in cols) {
        switch (cols[i]) {
          case /^(enabled(\-runtime)?|alias)$/:
            printf "<span color=\"%s\">%s</span> ", green, icon_ok
            break
          case /^(disabled|bad)$/:
            printf "<span color=\"%s\">%s</span>  ", red, icon_not_found
            break
          default:
            printf "<span color=\"%s\">%s</span> ", gray, icon_ok
            break
        }
      }
      printf "    <span color=\"%s\">%s</span> ",gray, icon_owner
      printf "<b>%s</b> — <small>%s  %s</small>", $1, $2, $3
      printf "\\0info\x1funit:%s\n", $1
     }'
  )
  echo -e "$output"
}

list_units() {
  # $@ = "one" "two", $* = "one two"
  [[ "$*" =~ $ARGS_USER ]] && icon_owner="${ico[user]}" || icon_owner="${ico[sys]}"

  output=$(systemctl --no-legend --no-pager -l "$@" |
    awk -F' +' -v icon_owner=$icon_owner $(import_icons) $(import_colors) \
    '{
      name=$2
      load=$3
      active=$4
      substate=$5

      # status warn
      if ($1 == "")
        printf "      "
      else
        printf "<span color=\"%s\">%s</span>  ", yellow, icon_warn

      # LOAD
      switch (load) {
        case "loaded":
          printf "<span color=\"%s\">%s</span>", green, icon_ok
          break
        case "not-found":
          printf "<span color=\"%s\">%s</span>", red, icon_not_found
          break
        case "bad-setting":
          printf "<span color=\"%s\">%s</span>", red, icon_bad_setting
          break
        case "error":
          printf "<span color=\"%s\">%s</span>", red, icon_error
          break
        case "masked":
          printf "<span color=\"%s\">%s</span>", gray, icon_masked
          break
        default:
          printf "<span color=\"%s\">%s</span>", gray, icon_unconfigured
          break
      }

      printf " "

      # ACTIVE
      switch (active) {
        case "active":
          printf "<span color=\"%s\">%s</span>", green, icon_ok
          break
        case "reloading":
          printf "<span color=\"%s\">%s</span>", gray, icon_reloading
          break
        case "inactive":
          printf "<span color=\"%s\">%s</span>", gray, icon_inactive
          break
        case "failed":
          printf "<span color=\"%s\">%s</span>", red, icon_error
          break
        case "activating":
          printf "<span color=\"%s\">%s</span>", gray, icon_activating
          break
        case "deactivating":
          printf "<span color=\"%s\">%s</span>", gray, icon_deactivating
          break
        default:
          printf "<span color=\"%s\">%s</span>", gray, icon_unconfigured
          break
      }

      printf "    <span color=\"%s\">%s</span> ",gray, icon_owner

      printf "<b>%s</b> [%s] — <small>", name, substate

      # DESCRIPTION
      for (i=6; i<=NF; i++) {
       printf "%s", $i
       if (i < NF) printf " "
      }

      printf "</small>\\0info\x1funit:%s\n", name
    }')
  echo -e "$output\n"
}

rofi_default() {
  echo -e "${ico[units]}\tInstalled Units\0info\x1flist-unit-files"
  echo -e " ${ico[memory]}\tRunning Units\0info\x1flist-units"
  echo -e " ${ico[error]}\tFailed\0info\x1flist-failed"
  # print_divider
  # echo -e "       Services\0info\x1flist-services"
  # echo -e "       Devices\0info\x1flist-devices"
  # echo -e "       Paths\0info\x1flist-paths"
  # echo -e "       Scopes\0info\x1flist-scopes"
  # echo -e "       Slices\0info\x1flist-slices"
  # echo -e "       Mounts\0info\x1flist-mounts"
  # echo -e "       Sockets\0info\x1flist-sockets"
  # echo -e "       Timers\0info\x1flist-timers"
  # echo -e "       Targets\0info\x1flist-targets"
}

rofi_list_all_units() {
  list_unit_files "${ARGS_USER}"
  list_unit_files
}

rofi_list_units() {
  list_units "${ARGS_USER}"
  list_units
}

rofi_list_failed() {
 list_units "${ARGS_FAILED}" "${ARGS_USER}"
 list_units "${ARGS_FAILED}"
}

rofi_service() {
  service="$1"
  set_subtitle "$service"

  is_service enabled "$service"
  toggle $service ${ctrl[enabled]} $?

  is_service active "$service"
  toggle $service ${ctrl[active]} $?

  echo -en "${ico[back]}\tBack\n"
  print_divider

  output=$(systemctl show "$service" | awk -F '=' \
  '{ printf "%s: %s\n", $1, $2 }')
  echo -en "$output"
}

set_message() {
  echo -en "\0message\x1f$1\n"
}

set_title() {
  echo -en "\0prompt\x1f$icon  $1\n"
}

set_subtitle() {
  set_title "→  $1  $2"
}

print_divider() {
  echo -en " \0nonselectable\x1ftrue\n"
}

# rofi_list_units() {
#   opts_list_networks
#   list_available_networks
# }

# if [[ -v CMD ]]; then
#   ex=$(${CMD} 2>&1)
#   ret=$?
#   notify "$ex" $ret
#   unset CMD
#   rofi -modi "sd:rofi-systemd" -show sd &
#   exit
# fi

# DEFAULT TITLE
set_title $title
echo -en "\0markup-rows\x1ftrue\n"

# FIRST RUN
if [[ $ROFI_RETV == 0 ]]; then
  if [[ ! -f ~/.cache/rofi-handoff ]]; then
    rofi_default
  else
    ROFI_RETV=1
    # XXX: this is problematic as hitting "back" allows will return
    # to same area and try to say, enable/disable a unit
    ROFI_INFO=$(awk 'NR==1' ~/.cache/rofi-handoff)
    ret=$(awk 'NR==2' ~/.cache/rofi-handoff)
    msg=$(awk 'NR>2' ~/.cache/rofi-handoff)

    rm ~/.cache/rofi-handoff
    notify "$msg" $ret
  fi
fi

# ENTRY MADE
if [[ $ROFI_RETV == 1 ]]; then
  case $ROFI_INFO in
    "list-units")
      set_subtitle "Running Units"
      echo -en "${ico[back]}  Back\n"
      print_divider
      rofi_list_units
      ;;
    "list-unit-files")
      set_subtitle "Installed Units"
      echo -en "${ico[back]}  Back\n"
      print_divider
      rofi_list_all_units
      ;;
    "list-failed")
      set_subtitle "Failed"
      echo -en "${ico[back]}  Back\n"
      print_divider
      rofi_list_failed
      ;;
    # "list-services")
    #   set_subtitle "Installed Services"
    #   echo -en "${ico[back]}  Back\n"
    #   print_divider
    #   list_unit_files "-t service"
    #   ;;
    ${ctrl[enabled]}:*)
      toggle_enabled $ROFI_INFO
      ;;
    ${ctrl[active]}:*)
      toggle_active $ROFI_INFO
      ;;
    unit:*)
      name=${ROFI_INFO#*unit:}
      rofi_service "$name"
      ;;
    *)
      rofi_default
      ;;
  esac

fi
