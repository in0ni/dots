#!/usr/bin/env bash

software_cache="${XDG_CACHE_HOME:-$HOME/.cache}/waybar-updates.software"
firmware_cache="${XDG_CACHE_HOME:-$HOME/.cache}/waybar-updates.firmware"

# preserve newlines in command arguments (passing data to get_count)
IFS=

# get update info on one line w/ ''\n'
awk_escape_nl='{ printf " %s\\n", $0 }'

get_count() {
  printf "$1" | grep -c '^'
}

get_details() {
  max=15
  count=$(get_count "$1")
  list="$1"
  ((count > max)) && list=$(echo "$1" | head -n $max) && list+="\n..."
  echo -e "$list" | awk "$awk_escape_nl"
}

get_waybar_data() {
  if [ -f "$1" ]; then
    cat "$1"
  else
    printf '{"tooltip": "%s is missing", "alt": "error"}' "$1"
  fi
}

print_usage() {
  echo >&2 "Usage (refresh): $0 refresh <software|firmware|all>"
  echo >&2 "Usage (display): $0 display <software|firmware>"
  exit 1
}

update_software() {
  # pacman
  pac=$(checkupdates --nocolor)
  pac_count=$(get_count "$pac")
  pac_info=$(get_details "$pac")

  # aur
  if aur repo -d paks &>/dev/null; then
    aur=$(aur repo -d paks --list | aur vercmp)
    aur_count=$(get_count "$aur")
    aur_info=$(get_details "$aur")
  fi

  # svr
  if grep srv ~/.ssh/config -q; then
    svr=$(ssh srv checkupdates)
    svr_count=$(get_count "$svr")
    svr_info=$(get_details "$svr")
  fi

  # set status icons & tooltip
  if ((svr_count == 0 && pac_count == 0 && aur_count == 0)); then
    software_tooltip+="Up to date"
    software_alt="uptodate"

  else
    if ((pac_count > 0)); then
      software_alt="pac"
    else
      software_alt="nopac"
    fi

    if ((aur_count > 0)); then
      software_alt+="_aur"
    fi
    if ((svr_count > 0)); then
      software_alt+="_svr"
    fi

    # print info for software_tooltip
    ((svr_count > 0)) && software_tooltip+="(${svr_count}) svr:\n${svr_info}\n"
    ((aur_count > 0)) && software_tooltip+="(${aur_count}) aur:\n${aur_info}\n"
    ((pac_count > 0)) && software_tooltip+="(${pac_count}) pac:\n${pac_info}\n"

    software_tooltip=$(echo -n "$software_tooltip" | sed 's/\\n\\n$/\\n/')

  fi

  # write obj for waybar
  printf '{"tooltip": "%s", "alt": "%s"}' "$software_tooltip" "$software_alt" >"$software_cache"
}

update_firmware() {
  fwupdmgr refresh 2>/dev/null

  fwupd_jq_simplify=".Devices[] | { dev: .Name, count: (.Releases|length|tostring), updates: [.Releases[] | {name: .Summary, ver: .Version, desc: .Description}] }"
  fwupd_jq_unique=".updates[].ver"
  fwupd_jq_finalout='.dev, (.updates[]|"   - "+.ver+": "+.name)'

  # -y assume yes
  fwupd_simple=$(fwupdmgr get-updates -y --json | jq "$fwupd_jq_simplify" 2>/dev/null)
  fwupd_unique=$(echo "$fwupd_simple" | jq "$fwupd_jq_unique")
  fwupd_json=$(echo "$fwupd_simple" | jq --raw-output "$fwupd_jq_finalout")
  fwupd_count=$(get_count "$fwupd_unique")
  fwupd_info=$(get_details "$fwupd_json")

  # set status icons & tooltip
  if ((fwupd_count == 0)); then
    local tooltip+="Up to date"
    local alt="uptodate"

  else
    alt="outdated"
    tooltip+="(${fwupd_count}) firmware:\n${fwupd_info}\n"
    tooltip=$(echo -n "$tooltip" | sed 's/\\n\\n$/\\n/')
  fi

  # write obj for waybar
  printf '{"tooltip": "%s", "alt": "%s"}' "$tooltip" "$alt" >"$firmware_cache"
}

case "$1" in
display)
  case "$2" in
  software)
    get_waybar_data "$software_cache"
    ;;
  firmware)
    get_waybar_data "$firmware_cache"
    ;;
  *)
    print_usage
    ;;
  esac
  ;;
refresh)
  case "$2" in
  software)
    update_software
    ;;
  firmware)
    update_firmware
    ;;
  all)
    update_software
    update_firmware
    ;;
  *)
    print_usage
    ;;
  esac
  ;;
*)
  print_usage
  ;;
esac
