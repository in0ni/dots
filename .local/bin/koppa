#!/usr/bin/bash
#
# @TODO: throw error when processing file if variable does not exist

xdg_cfg="${XDG_CONFIG_HOME:-$HOME/.config}"
cfg="${xdg_cfg}/koppa/config.json"
vars="${xdg_cfg}/koppa/variables.sh"

# used for filename matching
koppa_id="__"
# commented code that will change a hidden koppa file to unhidden
# .file__.ext > file.ext
unhide_cmd="koppa:unhide"

# colored output
tput_green="$(tput setaf 2)"
tput_blue="$(tput setaf 12)"
tput_red="$(tput setaf 1)"
tput_reset="$(tput sgr0)"

# set shellcheck to avoid these errors
set -a
# shellcheck source=/dev/null
source "$vars"
set +a

hex_to_rgb() {
  printf "%d, %d, %d" 0x"${1:0:2}" 0x"${1:2:2}" 0x"${1:4:2}"
}

check_variable() {
  if [ -z "${!1+x}" ]; then
    echo "${tput_red}[ERROR]    $1 is not defined ${tput_reset}" >&2
  fi
}

replace_tokens() {
  local content="$1"
  local pattern="$2"

  while [[ $content =~ $pattern ]]; do
    token="${BASH_REMATCH[1]}"

    if [[ "$token" == *"--rgb" ]]; then
      base_token="${token//--rgb/}"
      check_variable "$base_token"
      rgb_value=$(hex_to_rgb "${!base_token}")
      content="${content//${BASH_REMATCH[0]}/$rgb_value}"
    else
      check_variable "$token"
      value="${!token}"
      content="${content//${BASH_REMATCH[0]}/$value}"
    fi
  done

  echo "$content"
}

parse_file() {
  if [ -f "$1" ]; then
    file_in=$(basename "$1")
    base_path=$(dirname "$1")
    content=$(<"$1")

    # Only if file name ends in "__" or has it before the extension
    if [[ "$file_in" =~ ^(.+)$koppa_id\.[^.]+$ || "$file_in" =~ ^(.+)$koppa_id$ ]]; then
      echo "-> $1"

      # Remove the '__' from the file name
      file_out="${BASH_REMATCH[1]}"
      if [[ "$file_in" =~ \.[^.]+$ ]]; then
        extension="${file_in##*.}"
        file_out="$file_out.$extension"
      fi

      content=$(<"$1")
      content=$(replace_tokens "$content" '%\{([^\}]+)\}%')
      content=$(replace_tokens "$content" '"\!\{([^\}]+)\}\!"')

      # unhide file
      if tail "$1" 2>/dev/null | grep -q "$unhide_cmd"; then
        # shellcheck disable=2001
        file_out=$(sed 's/^\.//' <<<"$file_out")
      fi

      path_out="$base_path/$file_out"

      # file needs to be deleted since it's write protected
      if [ -f "$path_out" ]; then
        rm -f "$path_out"
      fi

      # write file & prevent writes
      echo "$content" >"$path_out"
      chmod 444 "$path_out"
      echo "${tput_green}[write]${tput_reset}    $1 -> $path_out"
    fi

  fi
}

parse_config() {
  # ensure koppa_file is in config
  name=$1
  if ! obj_id=$(jq -e -r ".[] | select(.id==\"${name}\")" "$cfg"); then
    echo "\"${name}\" is not a key in: ${cfg}"
    exit
  fi

  # cd into directory and find files
  path=$(echo "$obj_id" | jq -e -r ".path")
  expanded_path=$(eval echo "$path")
  echo "${tput_blue}==> $expanded_path${tput_reset}"

  if [[ -d "$expanded_path" ]]; then
    # iterate and parse through files
    find "$expanded_path" -type f | while read -r file; do
      parse_file "$file"
    done
  else
    parse_file "$expanded_path"
  fi

  # support for restarting a service/process
  if cmds=$(echo "$obj_id" | jq -e -r 'try .restart'); then
    args_string=$(echo "$cmds" | jq -r '. | join (" ")')
    args=("$args_string")
    # shellcheck disable=2068
    ${args[@]}
    ret=$?

    if [ $ret -eq 0 ]; then
      echo "${tput_green}[restart]${tput_reset} ${args[*]}"
    else
      echo "${tput_red}[failed] ${args[*]} ${tput_reset}"
    fi
  fi
}

case $1 in
ls)
  if [[ -z "$2" ]]; then
    jq -r '.[] | .id' "$cfg"

  else
    if jq -e ".[] | select(.id==\"$2\")" "$cfg" >/dev/null; then
      # XXX: using echo seems to escape color output
      jq -e ".[] | select(.id==\"$2\")" "$cfg"
    else
      echo "${tput_red} $2 is not a key in: $cfg ${tput_reset}"
    fi
  fi
  ;;
mk)
  if [[ "$2" == "all" ]]; then
    all_keys=$(jq -r '.[].id' "$cfg")
    for key in $all_keys; do
      parse_config "$key"
    done
  else
    parse_config "$2"
  fi
  ;;
*)
  echo -e "Usage: $(basename "$0") <ls|mk> [args]\n"
  echo -e "Commands:\n\t ls [KEY]\t without arguments, list all KEYS. Show configuration for KEY."
  # echo -e " \t mv FILE\t rename FILE by toggling \"$koppa_id\" in filename (before extension)."
  echo -e " \t mk KEY|all\t builds all files for KEY, or for *all* KEYS."
  ;;
esac
