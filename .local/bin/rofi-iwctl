#!/usr/bin/env bash

icon= 
title=Wireless
iwctl_station=wlan0

is_scanning() {
  scanning=$(iwctl station $iwctl_station show | \
    sed -E 's/\x1b\[1;30m\*{1,3}//g' | \
    awk -v FIELDWIDTHS='2 10 20 21' '$3~/Scanning/ { print $4 }')

  if [ $scanning = "yes" ]; then
    return 0
  else
    return 1
  fi
}

is_known_network() {
  iwctl known-networks ""$1"" show &> /dev/null
  return $?
}

do_station_scan() {
  iwctl station $iwctl_station scan
}

list_available_networks() {
  networks=$(iwctl station $iwctl_station get-networks | \
    sed -E 's/\x1b\[1;30m\*{1,3}//g' | \
    sed 's/\x1b\[[0-9;]*m//g' | \
    head -n -1 | \
    awk -v FIELDWIDTHS='4 31 18 6' \
    'NR > 4 {
      active=gensub(/ +/, "", "g", $1)
      ssid=gensub(/ +$/,"", "g", $2)
      security=gensub(/ +/,"", "g", $3)
      signal=length(gensub(/ /, "", "g", $4))

      # active
      if (length(active))
        printf "   "
      else
        printf "      "

      # security
      if (security == "open")
        printf "  "
      else
        printf "  "

      # signal
      for (i = 0; i < signal; ++i)
        printf ""
      for (i = 0; i < 4-signal; ++i)
        printf ""

      printf "  %s", ssid
      printf "\\0info\x1f%s\n", ssid
  }')

  echo -en "$networks"
}

list_known_networks() {
  known_networks=$(iwctl known-networks list | \
    head -n -1 | \
    awk -v FIELDWIDTHS='2 32 11 9 19' \
    'NR > 4 {
      ssid=gensub(/ +$/,"", "g", $2)
      security=gensub(/ +/,"", "g", $3)
      hidden=gensub(/ +/, "", "g", $4)
      last=gensub(/ +$/, "", "g", $5)

      # security
      if (security == "open")
        printf "  "
      else
        printf "  "

      printf " %s (%s)", ssid, last
      printf "\\0info\x1fknown-network:%s\n", ssid
  }')

  echo -en "$known_networks"
}

network_options() {
  echo -en "  Refresh networks list...\0info\x1fget-networks\n"
  # echo -en "  Scan for networks...\0info\x1fscan\n"
  echo -en "  Known networks...\0info\x1fknown-networks\n"
  print_divider
}

known_networks_options() {
  echo -en "  Back to networks list...\0info\x1fget-networks\n"
}

known_network_options() {
  ssid=$1
  echo -en "  Back to known networks list...\0info\x1fknown-networks\n"
  print_divider
  # echo -en "  Show Password\0info\x1fget-password:$ssid\n"
  # echo -en "  Auto Connect\0info\x1fnetwork-toggle-autoconnect\n"
  echo -en "  Forget\0info\x1fforget-network:$ssid\n"
}

set_message() {
  echo -en "\0message\x1f$1\n"
}

print_divider() {
  echo -en " \0nonselectable\x1ftrue\n"
}

# DEFAULT TITLE
echo -en "\0prompt\x1f$icon  $title\n"
set_message ""

# FIRST RUN
if [[ $ROFI_RETV == 0 ]]; then
  if ! is_scanning; then
    do_station_scan
    set_message "Scanning for networks, should refresh..."
  fi

  network_options
  list_available_networks
fi

# ENTRY MADE
if [[ $ROFI_RETV == 1 ]]; then

  case $ROFI_INFO in
    "get-networks")
      network_options
      list_available_networks
      ;;
    "known-networks")
      echo -en "\0prompt\x1f$icon → Known Networks\n"
      known_networks_options
      print_divider
      list_known_networks
      ;;
    known-network:*)
      ssid=${ROFI_INFO#*known-network:}
      echo -en "\0prompt\x1f$icon →   $ssid\n"
      # network_options
      known_network_options $ssid
      ;;
    forget-network:*)
      ssid=${ROFI_INFO#*forget-network:}
      iwctl known-networks $ssid forget
      ;;
    get-password:*)
      ssid=${ROFI_INFO#*get-password:}
      # pkexec cat "/var/lib/iwd/$ssid.psk"
      ;;
    *)
      # is_known="$(iwctl known-networks list | \
      # awk -v fieldwidths='2 32 11 9 19' 'nr > 4 {print $2}' | \
      # grep ""$ROFI_INFO"" | wc -l)"
      if is_known_network $ROFI_INFO; then
        set_message "unable to connect to $ROFI_INFO..."
        iwctl station $iwctl_station connect "$ROFI_INFO"
      else
        echo "$ROFI_INFO" > $HOME/.cache/rofi-iwctl.connect
        echo -en "\0message\x1fenter password for $ROFI_INFO\n"
        echo -en "\0prompt\x1f$icon  password\n"
        echo -en "enter text...\0nonselectable\x1ftrue\n"
      fi
      ;;
  esac

fi

# CUSTOM ENTRY MADE
if [[ $ROFI_RETV == 2 ]]; then
  ssid="$(cat $HOME/.cache/rofi-iwctl.connect)"
  set_message "Unable to connect to $ssid..."
  iwctl -P """$@""" station $iwctl_station connect """$ssid"""
fi

