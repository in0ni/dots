#!/usr/bin/env bash

icon= 
title=Wireless
# TODO: remove this hardcoded reference
# TODO: add support for multiple devices
iwctl_station=wlan0

# awk field widths
fields_station_show="2 10 20 21"
fields_get_networks="4 31 18 6"
fields_known_networks="2 32 11 9 19"

# fontawesome
declare -A icon
icon[active]=
icon[insecure]=
icon[secure]=
icon[radio_on]=
icon[radio_off]=
icon[refresh]=
icon[saved]=
icon[back]=
icon[show]=
icon[auto]=
icon[delete]=
icon[password]=

# UTILS
import_icons() {
  for arg in "$@"; do
    echo "-v icon_$arg=${icon[$arg]} "
  done
}

# TEST FUNCTIONS
is_scanning() {
  output=$(iwctl station $iwctl_station show | \
    sed -E 's/\x1b\[1;30m\*{1,3}//g' | \
    awk -v FIELDWIDTHS="$fields_station_show" '$3~/Scanning/ { print $4 }')

  if [ $output = "yes" ]; then
    return 0
  else
    return 1
  fi
}

is_known_network() {
  iwctl known-networks ""$1"" show &> /dev/null
  return $?
}

# ACTIONS
do_station_scan() {
  iwctl station $iwctl_station scan
}

# LISTS
list_available_networks() {
  output=$(iwctl station $iwctl_station get-networks | \
    sed -E 's/\x1b\[1;30m\*{1,3}//g' | \
    sed 's/\x1b\[[0-9;]*m//g' | \
    head -n -1 | \
    awk -v FIELDWIDTHS="$fields_get_networks" \
    $(import_icons "active" "insecure" "secure" "radio_on" "radio_off") \
    'NR > 4 {
      active=gensub(/ +/, "", "g", $1)
      ssid=gensub(/ +$/,"", "g", $2)
      security=gensub(/ +/,"", "g", $3)
      signal=length(gensub(/ /, "", "g", $4))

      # active
      if (length(active))
        printf "%s   ", icon_active
      else
        printf "      "

      # security
      if (security == "open")
        printf "%s  ", icon_insecure
      else
        printf "%s  ", icon_secure

      # signal
      for (i = 0; i < signal; ++i)
        printf "%s", icon_radio_on
      for (i = 0; i < 4-signal; ++i)
        printf "%s", icon_radio_off

      printf "  %s", ssid

      if (length(active))
        printf "\\0info\x1fdisconnect\n"
      else
        printf "\\0info\x1fconnect:%s\n", ssid
  }')

  echo -en "$output"
}

list_known_networks() {
  output=$(iwctl known-networks list | \
    head -n -1 | \
    awk -v FIELDWIDTHS="$fields_known_networks" \
    $(import_icons "insecure" "secure") \
    'NR > 4 {
      ssid=gensub(/ +$/,"", "g", $2)
      security=gensub(/ +/,"", "g", $3)
      hidden=gensub(/ +/, "", "g", $4)
      last=gensub(/ +$/, "", "g", $5)

      # security
      if (security == "open")
        printf "%s  ", insecure
      else
        printf "%s  ", secure

      printf " %s (%s)", ssid, last
      printf "\\0info\x1fknown-network:%s\n", ssid
  }')

  echo -en "$output"
}

# OPTIONS
opts_list_networks() {
  echo -en "${icon[refresh]}  Refresh networks list...\0info\x1flist-networks\n"
  # echo -en "  Scan for networks...\0info\x1fscan\n"
  echo -en "${icon[saved]}  Known networks...\0info\x1flist-known-networks\n"
  print_divider
}

opts_list_known_networks() {
  echo -en "${icon[back]}  Back to networks list...\0info\x1flist-networks\n"
}

opts_known_network() {
  ssid=$1
  echo -en "${icon[back]}  Back to known networks list...\0info\x1flist-known-networks\n"
  print_divider
  # echo -en "${icon[show]}  Show Password\0info\x1fget-password:$ssid\n"
  # echo -en "${icon[auto]}  Auto Connect\0info\x1fnetwork-toggle-autoconnect\n"
  echo -en "${icon[delete]} Forget\0info\x1fforget-network:$ssid\n"
}

# MISC
set_message() {
  echo -en "\0message\x1f$1\n"
}

set_title() {
  echo -en "\0prompt\x1f$icon  $1\n"
}

set_subtitle() {
  set_title "→  $1  $2"
}

print_divider() {
  echo -en " \0nonselectable\x1ftrue\n"
}

rofi_list_networks() {
  opts_list_networks
  list_available_networks
}

# DEFAULT TITLE
set_title $title
set_message ""

# FIRST RUN
if [[ $ROFI_RETV == 0 ]]; then
  if ! is_scanning; then
    do_station_scan
    set_message "Scanning for networks, should refresh..."
  fi

  rofi_list_networks
fi

# ENTRY MADE
if [[ $ROFI_RETV == 1 ]]; then

  case $ROFI_INFO in
    list-networks)
      rofi_list_networks
      ;;
    "list-known-networks")
      set_subtitle "Known Networks" ${icon[saved]}
      opts_list_known_networks
      print_divider
      list_known_networks
      ;;
    known-network:*)
      ssid=${ROFI_INFO#*known-network:}
      set_subtitle "$ssid" ${icon[saved]}
      opts_known_network $ssid
      ;;
    forget-network:*)
      ssid=${ROFI_INFO#*forget-network:}
      iwctl known-networks $ssid forget
      ;;
    disconnect)
      iwctl station $iwctl_station disconnect
      ;;
    # get-password:*)
    #   ssid=${ROFI_INFO#*get-password:}
    #   # pkexec cat "/var/lib/iwd/$ssid.psk"
    #   ;;
    connect:*)
      ssid=${ROFI_INFO#*connect:}
      if is_known_network $ssid; then
        set_message "unable to connect to $ssid..."
        cmd=$(iwctl station $iwctl_station connect "$ssid")
        if [ $? -eq 0 ]; then
          dunstify "Connected to $ssid"
        fi
      else
        echo "$ssid" > $HOME/.cache/rofi-iwctl.connect
        set_subtitle "$ssid" ${icon[password]}
        echo -en "\0message\x1fEnter password for $ssid...\n"
        print_divider
      fi
      ;;
  esac

fi

# CUSTOM ENTRY MADE
if [[ $ROFI_RETV == 2 ]]; then
  ssid="$(cat $HOME/.cache/rofi-iwctl.connect)"
  set_message "Unable to connect to $ssid..."
  echo -en "${icon[back]}  Back to known networks list...\0info\x1flist-known-networks\n"
  print_divider
  iwctl -P """$@""" station $iwctl_station connect """$ssid"""
fi

