#!/usr/bin/env bash
#
# TODO: systemd service
# TODO: auto-detect device, multiple devices
# TODO: better messaging (on fail/success)
# TODO: final round of testing (auto-connect not working?)
# TODO: fix issue with ssid with spaces

icon=
title=Wireless
# XXX: remove this hardcoded reference
iwctl_station=wlan0

# look into ' +' regex for field separator, like rofi-systemctl
# awk field widths
fields_station_show="2 10 20 21"
fields_get_networks="6 34 20 4"
fields_known_networks="2 32 13 13 20"
fields_known_network_show="2 10 18 50"

# fontawesome
declare -A ico
ico[active]=
ico[insecure]=
ico[secure]=
ico[radio_on]=
ico[radio_off]=
ico[refresh]=
ico[saved]=
ico[back]=
ico[show]=
ico[auto]=
ico[delete]=
ico[password]=
ico[warn]=
ico[not_found]=

# UTILS
import_icons() {
  for arg in "$@"; do
    echo "-v icon_$arg=${ico[$arg]} "
  done
}

# TEST FUNCTIONS
is_scanning() {
  output=$(iwctl station $iwctl_station show \
    | sed 's/\x1b\[[0-9;]*m//g' \
    | awk -v FIELDWIDTHS="$fields_station_show" '$3~/Scanning/ { print $4 }')

  if [[ $output == "yes" ]]; then
    return 0
  else
    return 1
  fi
}

is_known_network() {
  iwctl known-networks "$1" show &> /dev/null
  return $?
}

# ACTIONS
do_station_scan() {
  iwctl station $iwctl_station scan
  notify "Scanning for networks..." $?
}

# LISTS
list_available_networks() {
  output=$(iwctl station $iwctl_station get-networks \
    | sed -E 's/\x1b\[1;90m\*{1,3}//g' \
    | sed 's/\x1b\[[0-9;]*m//g' \
    | head -n -1 \
    | awk -v FIELDWIDTHS="$fields_get_networks" \
      $(import_icons "active" "insecure" "secure" "radio_on" "radio_off" "not_found") \
      'NR > 4 {

      # no networks found
      if ($1 == "No n") {
        printf "%s  No networks found...", icon_not_found
        exit
      }

      active=gensub(/ +/, "", "g", $1)
      ssid=gensub(/ +$/,"", "g", $2)
      security=gensub(/ +/,"", "g", $3)
      signal=length(gensub(/ /, "", "g", $4))

      # active
      if (length(active))
        printf "%s  ", icon_active
      else
        printf "      "

      # security
      if (security == "open")
        printf "%s  ", icon_insecure
      else
        printf "%s  ", icon_secure

      # signal
      for (i = 0; i < signal; ++i)
        printf "%s", icon_radio_on
      for (i = 0; i < 4-signal; ++i)
        printf "%s", icon_radio_off

      printf "  %s", ssid

      if (length(active))
        printf "\\0info\x1fdisconnect\n"
      else
        printf "\\0info\x1fconnect:%s:%s\n", gsub(" ","\\ ", ssid), security
  }')
  echo -en "$output"
}

list_known_networks() {
  output=$(iwctl known-networks list \
    | sed -E 's/\x1b\[1;90m\*{1,3}//g' \
    | sed 's/\x1b\[[0-9;]*m//g' \
    | head -n -1 \
    | awk -v FIELDWIDTHS="$fields_known_networks" \
      $(import_icons "insecure" "secure") \
      'NR > 4 {
      ssid=gensub(/ +$/,"", "g", $2)
      security=gensub(/ +/,"", "g", $3)
      hidden=gensub(/ +/, "", "g", $4)
      last=gensub(/ +$/, "", "g", $5)

      printf "      "
      # security
      if (security == "open")
        printf "%s  ", icon_insecure
      else
        printf "%s  ", icon_secure

      printf " %s (%s)", ssid, last
      printf "\\0info\x1fknown-network:%s\n", ssid
  }')
  echo -en "$output"
}

# OPTIONS
opts_list_networks() {
  echo -en "${ico[refresh]}  Refresh networks list...\0info\x1flist-networks\n"
  # echo -en "  Scan for networks...\0info\x1fscan\n"
  echo -en "${ico[saved]}  Known networks...\0info\x1flist-known-networks\n"
  print_divider
}

opts_list_known_networks() {
  echo -en "${ico[back]}  Back to networks list...\0info\x1flist-networks\n"
}

opts_known_network() {
  ssid=$1
  echo -en "${ico[back]}  Back to known networks list...\0info\x1flist-known-networks\n"
  print_divider
  opt_toggle_auto_connect "$ssid"
  # echo -en "${ico[show]}  Show Password\0info\x1fget-password:$ssid\n"
  echo -en "${ico[delete]} Forget\0info\x1fforget-network:$ssid\n"
}

opt_toggle_auto_connect() {
  output=$(iwctl known-networks "$1" show \
    | sed 's/\x1b\[[0-9;]*m//g' \
    | awk -v FIELDWIDTHS="$fields_known_network_show" '$3~/AutoConnect/ { print $4 }')

  [[ $output == "yes" ]] && toggle=no || toggle=yes
  echo -en "${ico[auto]}  Auto Connect: $output\0info\x1fauto-connect:$1:$toggle\n"
}

# MISC
set_message() {
  echo -en "\0message\x1f$1\n"
}

set_title() {
  echo -en "\0prompt\x1f$icon  $1\n"
}

set_subtitle() {
  set_title "→  $1  $2"
}

print_divider() {
  echo -en " \0nonselectable\x1ftrue\n"
}

rofi_list_networks() {
  opts_list_networks
  list_available_networks
}

notify() {
  desc=$1
  status=$2

  [[ $status == 0 ]] && urgency=normal || urgency=critical
  notify-send "$title" "$desc" -i network-wireless-connected -u "$urgency"
}

# DEFAULT TITLE
set_title $title
set_message ""

# FIRST RUN
if [[ $ROFI_RETV == 0 ]]; then
  if ! is_scanning; then
    do_station_scan
    set_message "Scanning for networks, should refresh..."
  fi

  rofi_list_networks
fi

# ENTRY MADE
if [[ $ROFI_RETV == 1 ]]; then

  case $ROFI_INFO in
    list-networks)
      rofi_list_networks
      ;;
    list-known-networks)
      set_subtitle "Known Networks" ${ico[saved]}
      opts_list_known_networks
      print_divider
      list_known_networks
      ;;
    known-network:*)
      ssid=${ROFI_INFO#*known-network:}
      set_subtitle "$ssid" ${ico[saved]}
      opts_known_network "$ssid"
      ;;
    forget-network:*)
      ssid=${ROFI_INFO#*forget-network:}
      iwctl known-networks "$ssid" forget
      notify "Forgot network" $?
      ;;
    auto-connect:*)
      data=(${ROFI_INFO//:/ })
      iwctl known-networks "${data[1]}" set-property AutoConnect "${data[2]}"
      notify "Toggle auto-connect" $?
      opts_known_network "${data[1]}"
      ;;
    disconnect)
      iwctl station $iwctl_station disconnect
      notify "Disconnected" $?
      ;;
    # get-password:*)
    #   ssid=${ROFI_INFO#*get-password:}
    #   # pkexec cat "/var/lib/iwd/$ssid.psk"
    #   ;;
    connect:*)
      data=(${ROFI_INFO//:/ })
      ssid="${data[1]}"
      security="${data[2]}"
      if is_known_network "$ssid" || [ "$security" = "open" ]; then
        set_message "Unable to connect to $ssid..."
        cmd=$(iwctl station $iwctl_station connect "$ssid")
        ret=$?
        if [ $ret -eq 0 ]; then
          notify "Connected to $ssid" $ret
        fi
      else
        echo "$ssid" > "$HOME"/.cache/rofi-iwctl.connect
        set_subtitle "$ssid" ${ico[password]}
        echo -en "\0message\x1fEnter password for $ssid...\n"
        print_divider
      fi
      ;;
  esac

fi

# CUSTOM ENTRY MADE (password)
if [[ $ROFI_RETV == 2 ]]; then
  ssid="$(cat $HOME/.cache/rofi-iwctl.connect)"
  set_subtitle "$ssid" ${ico[password]}
  cmd=$(iwctl -P """$@""" station $iwctl_station connect """$ssid""")
  ret=$?

  if [[ $ret -eq 0 ]]; then
    notify "Connected to $ssid" $ret
  else
    error=$(echo $cmd | sed 's/\x1b\[[0-9;]*m//g')
    set_message "${ico[warn]}  $error."
    notify "Incorrect Password" $ret
    echo -en "${ico[back]}  Back to networks list...\0info\x1flist-networks\n"
    echo -en "${ico[refresh]}  Try Again...\0info\x1fconnect:$ssid\n"
  fi
fi
