#!/usr/bin/bash
set -uo pipefail

# tput_red="$(tput setaf 1)"
# tput_reset="$(tput sgr0)"
get_input() {
  title="$1"
  description="$2"

  input=$(dialog --clear --stdout --backtitle "Setup" --title "$title" --inputbox "$description" 0 0)
  echo "$input"
}

copy_dots_home() {
  usr_repo_name=$(get_input "User dotfiles" "Enter repo name") || exit 1
  clear
  : ${usr_repo_name:?"repo name cannot be empty"}
  usr_repo_base_url=$(get_input "User dotfiles" "Enter repo url path") || exit 1
  clear
  : ${usr_repo_base_url:?"url cannot be empty"}
  usr_repo_url="$usr_repo_base_url/$usr_repo_name"

  cd "$HOME" || exit
  git clone "$usr_repo_url"
  cd "$usr_repo_name" || exit

  git config --local status.showUntrackedFiles no
  git config --local user.name "Andrés González"
  git config --local user.email "1596691+in0ni@users.noreply.github.com"

  # move files
  mv .git ../.dots-home
  cp -a ./. ../

  # clean-up
  cd ../
  rm -rf "$usr_repo_name"
}

copy_dots_sys() {
  # TODO: generate key pair, and add to server before starting this!
  sys_repo_name=$(get_input "System conf files" "Enter repo name") || exit 1
  clear
  : ${sys_repo_name:?"repo name cannot be empty"}
  sys_repo_base_url=$(get_input "System conf files" "Enter repo url path") || exit 1
  clear
  : ${sys_repo_base_url:?"url cannot be empty"}
  sys_repo_url="$sys_repo_base_url/$sys_repo_name"

  cd "$HOME" || exit
  git clone "$sys_repo_url"
  cd "$sys_repo_name" || exit

  git config --local status.showUntrackedFiles no
  git config --local user.name "Andrés González"
  git config --local user.email "1596691+in0ni@users.noreply.github.com"

  # move files
  # mv .git ../.dots-sys
  # sudo cp -a ./. /

  # clean-up
  # cd ../
  # rm -rf "$sys_repo"
}

user_service_blacklist() {
  local string="$1"
  local avoid=(idle-lock hyprland-session waybar-updates.service)

  for prefix in "${avoid[@]}"; do
    if [[ "$string" == "$prefix"* ]]; then
      return 0
    fi
  done

  return 1
}

select_services_user() {
  local dir="${XDG_CONFIG_HOME:-$HOME/.config}/systemd/user"
  local files=()
  local options=()

  if [[ -d "$dir" ]]; then
    while IFS= read -r file; do
      # set all services as checked by default
      files+=("$file")
    done < <(find "$dir" -maxdepth 1 -type f -printf "%f\n")
  else
    echo "$dir does not exist."
    exit 1
  fi

  for file in "${files[@]}"; do
    if user_service_blacklist "$file"; then
      options+=("$file" "(!)" "off")
    else
      options+=("$file" "" "on")
    fi
  done

  local result=($(dialog --clear --stdout --checklist "Select User Services:" 0 0 0 "${options[@]}"))
  clear
  echo "${result[@]}"
}

select_services_sys() {
  local services=(
    iwd.service
    firewalld.service
    systemd-networkd.service
    systemd-resolved.service
    tlp.service
    reflector.timer
    snapper-cleanup.timer
  )

  local options=()

  for service in "${services[@]}"; do
    options+=("$service" "" "on")
  done

  local result=($(dialog --clear --stdout --checklist "Select System Services:" 0 0 0 "${options[@]}"))
  # clear
  echo "${result[@]}"
}

case $1 in
user)
  copy_dots_home
  systemctl --user daemon-reload
  # enable selected services
  selected=($(select_services_user))

  # load services
  for item in "${selected[@]}"; do
    systemctl --user enable --now $item
  done
  ;;
sys)
  copy_dots_sys
  # enable selected services
  selected=($(select_services_sys))

  # load services
  # TODO: properly copy files and enable services
  for item in "${selected[@]}"; do
    echo "systemctl enable --now $item"
  done
  echo "NOTE: you must manually copy config files for now"
  echo "NOTE: you must manually enable services above"
  ;;
*)
  echo -e "Usage: $(basename "$0") <user|sys>\n"
  ;;
esac
