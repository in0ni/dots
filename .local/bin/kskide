#!/bin/bash
#
# this is a very CRUDE start
package=$(basename $0)
session_name=$(basename `pwd`)
socket_file=$(kak -l | grep $session_name)
base_title="$session_name </>"
join_session=false

# project & theme support
# project_conf="$HOME/.config/kskide.projs"
# theme_variant=$(waystep kak)
# theme_file="$HOME/.config/rofi/theme/$theme_variant.rasi"
# rofi_theme_option=""
# if [ -f "${theme_file}" ]; then
#   rofi_theme_option="-theme $theme_file"
# fi

# parse/handle args
while test $# -gt 0; do
  case "$1" in
    # -p|--projects)
    #   delim=';'
    #   # TODO: if user escapes rofi, return and end process
    #   selection=$(cat $project_conf | cut -d $delim -f 1 | \
    #     rofi -dmenu -p '  → Select Project' $rofi_theme_option | sed -E "s/\w+: //g")
    #   selection_path=$(grep $selection $project_conf | cut -d $delim -f 2)
    #   selection_type=$(grep $selection $project_conf | cut -d $delim -f 3)

    #   kitty @ launch --no-response --cwd $selection_path --type os-window kskide
    #   exit 0
   #   ;;
    -h|--help)
      echo "$package - Kakoune, Sway, Kitty based IDE. Will create windows: main, docs, tools, shell"
      echo " "
      echo "$package [options]"
      echo " "
      echo "options:"
      echo "-h, --help                show brief help"
      echo "-j, --join-existing-session"
      exit 0
      ;;
    -j|--join-session)
      shift
      join_session=true
      ;;
    *)
      ;;
  esac
done

# create new layout using kitty and sway
createLayout() {
  title_shell="$base_title shell"
  title_main="$base_title main"
  title_docs="$base_title docs"
  title_tools="$base_title tools"

  kitty @ launch --cwd `pwd` --no-response --type os-window\
    --env KAKOUNE_SESSION=$session_name\
    --env KAKOUNE_CLIENT=main\
    --env NNN_OPENER="kcr edit"\
    --title "$title_shell"\

  # create main client
  kitty @ launch --no-response --type os-window\
    --env $KAKOUNE_SESSION=$session_name\
    --title "$title_main"\
    kak -e "ide-set-client main jumpclient" -c $session_name

  swaymsg move left
  swaymsg "[title=\"$title_shell\"] focus"
  swaymsg splitv

  # create docs client
  kitty @ launch --no-response --type os-window\
    --env $KAKOUNE_SESSION=$session_name\
    --title "$title_docs"\
    kak -e "ide-set-client docs docsclient" -c $session_name

  swaymsg move up
  swaymsg "[title=\"$title_shell\"] focus"
  swaymsg splith

  # create tools client
  kitty @ launch --no-response --type os-window\
    --env $KAKOUNE_SESSION=$session_name\
    --title "$title_tools"\
    kak -e "ide-set-client tools toolsclient" -c $session_name

  swaymsg move left
  swaymsg layout tabbed

  # set focus on main client
  swaymsg "[title=\"$title_main\"] focus"
  
  
  # swayid_shell=$(swaymsg -t get_tree|jq -r "..|try select(.name==\"$title_shell\")|.id")
  # swayid_main=$(swaymsg -t get_tree|jq -r "..|try select(.name==\"$title_main\")|.id")
  # swayid_docs=$(swaymsg -t get_tree|jq -r "..|try select(.name==\"$title_docs\")|.id")
  # swayid_tools=$(swaymsg -t get_tree|jq -r "..|try select(.name==\"$title_tools\")|.id")

  kcr -s $session_name send unalias global q quit
  kcr -s $session_name send unalias global q! quit!
}

# handle basic command logic
if [[ $socket_file == "" ]]; then
  # start daemon & set term title
  setsid kak -d -s $session_name &
  # kcr shell -s $session_name
  createLayout
elif [[ $socket_file != "" && $join_session == true ]]; then
  createLayout
else
  echo "To join this session use the -j parameter: 'kskide -j'"
  echo "Session \"$session_name\" already exists."
  exit 1
fi

# TODO: add to createLayout, set timeout?
# kitty @ close-window --match title:"$base_title xxx"

